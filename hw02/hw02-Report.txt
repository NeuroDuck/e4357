Assignment #2 Report:
-------------------

This assignment took somewhere between 14-24 hours so far.

Issues along the way:
--------------------
sudo apt-get install tcsh

Findings along the way:
----------------------
In tcsh:
set a=b.c
echo $a:r # prints b
echo $a:e # prints c
Using $1:r and $1:e in tcsh, make it easier to write
generic compile scripts.

Yes, you are right, Clifff like you'd asked in a prev email you'll need the mbed Windows Serial driver from here:
http://developer.mbed.org/handbook/Windows-serial-configuration

Switched datatype of buffer from "unsigned char" to "uint8_t".  It's the same, I know, but I wanted it to exactly match the datatype of FIOPIN1 in LPC17xx.h.

Timer Findings along the way:
----------------------
LPC1768 has 4 Counter/Timers.
They have 2 or 4 Capture(CAP) inputs,
      and 2 or 4 Match(MAT)   outputs.
Int on Match, 
Stop counting on Match, w/optional Int.
Reset timer on match, w/optional Int.
MAT outputs can be set low/high/toggle/nochange on Match.
Count externally-supplied clock.
Four Match registers.
Four Capture inputs, to trap timer value when an input 
signal transitions.

Assignment:
----------
C:\git\e4357\hw02\HW2ComputeinputGPIOsignalfrequency.pdf

Starting from Sample code here:
------------------------------
https://github.com/Shengliang/e4357/blob/master/spring2015/hw2/main.c

GPIO Pins vs. Ports map here:
----------------------------
http://developer.mbed.org/users/synvox/notebook/lpc1768-pinout-with-labelled-mbed-pins/

My Pin = 27 = P0[11].

Providing my Input Signal from my 'scope's Signal Generator, as shown in the checked in photo.


Results/Solutions:
-----------------

My hw02.cpp comments explain my current thought process.

I'll on it further as time permits.

My output with the current version (Mon., ~12:50pm), 
with an 8MHz input signal from my DSO QUAD's Signal 
Generator is as shown below.

See the 8MHz photo to see how low-quality my input signal is:

8b: 1000 1011 : 0 
8b: 1000 1011 : 0 
8f: 1000 1111 : 1 
8f: 1000 1111 : 1 
8f: 1000 1111 : 1 
8f: 1000 1111 : 1 
8f: 1000 1111 : 1 
8f: 1000 1111 : 1 

8b: 1000 1011 : 0 
8b: 1000 1011 : 0 
8b: 1000 1011 : 0 
8f: 1000 1111 : 1 
8f: 1000 1111 : 1 
8f: 1000 1111 : 1 
8f: 1000 1111 : 1 
8b: 1000 1011 : 0 

8f: 1000 1111 : 1 
8f: 1000 1111 : 1 
8f: 1000 1111 : 1 
8b: 1000 1011 : 0 
8b: 1000 1011 : 0 
8b: 1000 1011 : 0 
8b: 1000 1011 : 0 
8f: 1000 1111 : 1 

8f: 1000 1111 : 1 
8b: 1000 1011 : 0 
8f: 1000 1111 : 1 
8b: 1000 1011 : 0 
8b: 1000 1011 : 0 
8b: 1000 1011 : 0 
8b: 1000 1011 : 0 
8f: 1000 1111 : 1 

8b: 1000 1011 : 0 
8b: 1000 1011 : 0 
8f: 1000 1111 : 1 
8f: 1000 1111 : 1 
8f: 1000 1111 : 1 
8f: 1000 1111 : 1 
8f: 1000 1111 : 1 
8f: 1000 1111 : 1 

8b: 1000 1011 : 0 
8b: 1000 1011 : 0 
8b: 1000 1011 : 0 
8f: 1000 1111 : 1 
8f: 1000 1111 : 1 
8f: 1000 1111 : 1 
8f: 1000 1111 : 1 
8b: 1000 1011 : 0 

8f: 1000 1111 : 1 
8f: 1000 1111 : 1 
8f: 1000 1111 : 1 
8b: 1000 1011 : 0 
8b: 1000 1011 : 0 
8b: 1000 1011 : 0 
8b: 1000 1011 : 0 
8f: 1000 1111 : 1 

The right-most 1's and 0's are my Pin's sampled state.

So perhaps now I'm successfully detecting my input signal.

I'll try it further with longer delays, and a slower (= more square-wave-shaped) input signal, to check if I can get more clear-cut results than the above.

I'll check in another version of source and this Report when I do.

First I'll be working on the Quizzes though.
