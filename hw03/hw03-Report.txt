Assignment #3 Report:
-------------------

This assignment took about 15 hours, mostly getting the inter-MCU communication working, 
due to adding various print statements to diagnose wires plugged in incorrectly, typing
errors in entering the code, etc. 

Issues along the way:
--------------------
Wiring up the two MCU's consistently, and for easy debugging.
I.e., using green wire associated with a green LED, and 
red wire associated with a red LED, and adding "GREEN" and "RED" 
to #define constants, to simplify debugging.

Findings along the way:
----------------------
There doesn't seem to be any straightforward-to-use Terminal program for Macs.
At least, none of the several we tried worked.

To test, we went through the Truth Table (00, 01, 10, 11) of inputs on both MCU's, 
and confirmed via printf()'s and the LED states, that the correct signals were 
being received and interpreted on the other MCU, in both directions.

Assignment:
----------
C:\git\e4357\hw03\HW3-Assignment.txt

Quiz:
----
https://github.com/Shengliang/e4357/blob/master/fall2014/quiz/Q3.txt

Starting from Sample code here:
------------------------------
Embedded_Systems-book.pdf, pg. 135.

Results/Solutions:
-----------------
My hw03.cpp adds to the sample code on pg. 135, by making it easier to debug 
any mis-signaling between the two MCU's.

I'll work on an I2C version of it further as time permits.

The "I2C Analyzer-p1.png" image shows my Logic Analyzer's output for:

    I2C i2c( p28, p26);        // SDA, SCL;
    while (1)
    {
        i2c.start();
        i2c.write( 0x2a, "S", 1, false);
        i2c.stop();
    }

with no Device 0x2a present on the I2C Bus.

I'll add more once I add the Slave I2C Device.

Added Screenshots for Debugging I2C (ask Slave for its ID only).  
My Slave is an Arduino Nano, running the I2C_v2-Slave.ino sketch.

I forgot to mention, the NACK (0x54), in my Logic Analyzer's I2C 
window is really the SLAVE_ADDRESS7BIT (0x2a), left-shifted 1 bit,
to make room for the 0 or 1 to specify I2C Read or I2C Write.

I've completed and checked in a complete implementation of 3 commands and 
responses being exchanged via I2C between the LPC1768 and Arduino Nano, 
along with photos of the output and wiring.

One of the commands just checks the (fixed) ID# of the I2C Slave.

Each of the other two commands request and return the value of 
the "Orange" and the "Green" switches (actually wires) on the I2C Slave.

I've confirmed that the wires' being plugged into "+" or "-" are 
accurately reflected in the values returned to the I2C Master.

Additional findings from reviewing I2C Logic Analyzer output:
------------------------------------------------------------
Command #1's answer (= just return a const myID#) is put onto the I2C Bus ~25uS 
faster than answers to Commands #2-3 (= Get Pin State for Orange or Green wires).

This seems to lead to the following situations, though I don't yet understand why:

I.e., "Command #1-0uS.png" shows a bolluxed-up transaction, due to 0uS. delay between:
    i2c.write( slaveAddr, cmd#1);
and the:
	i2c.read( slaveAddr, result);

From the I2C window in that .png file, we can see:
	Start
	Read from 0x2a ACK'ed
	Command for 0x2a is 0x1 ACK'ed
	Stop
	Start
	Write from(?) 0x2a NACK'ed
	Stop

In comparison, when I increased the delay above to 1uS., the I2C window contains the
results as shown in "Command #1-1uS.png", which seems to be a correctly-formed 
conversation:
	Start
	Read from 0x2a ACK'ed
	Command for 0x2a is 0x1 ACK'ed
	Stop
	Start
	Write from 0x2A ACK'ed
	Write value 0x55 NACK'ed
	Stop

Q: Is it typical that there is no ACK when the Master receives the Slave's response?

Similarly, "Command #1-200uS.png" shows a correctly-formed execution of Command #1, 
this time with a delay as above == 200uS.:
	Start
	Read from 0x2a ACK'ed
	Command for 0x2a is 0x1 ACK'ed
	Stop
	Start
	Write from 0x2a ACK'ed
	Write value 0x55 NACK'ed
	Stop

Likewise "Command #2-0-200uS.png" shows a correct conversation, this time reading 
a value of 0x0 from the "Orange Wire" on the Slave, which was also NACK'ed.

Interestingly, "Command #2-1-100uS.png" shows what happens when I set the delay 
above == 100uS.  100uS. seems to be too fast, as the response returned is gibberish, 
as the expected values are 0x0 or 0x1.

What I can't explain is why the gibberish is 0x55.  Perhaps this is some behavior 
of the Slave's I2C implementation, I'm not sure.

In any case, "Command #2-1-190uS.png" shows another incorrect conversation, this time
for a 190uS. delay.  

Comparing this to "Command #2-1-200uS.png", where the delay == 200uS.
You can see the response data is now put onto the Bus ~150uS. later than 
it was with a 190uS. delay, and it is now a valid value (0x1 in this case).

Q: When the write() -> read() delay is increased from 190uS. to 200uS., why does the 
   gap between the read() address <-> read() data dramatically increase from 20uS. to
   ~150uS.?
   
In "Command #3-0-200uS.png" and "Command #3-1-200uS.png" we see two well-formed 
conversations, this time returning a 0x0 state or a 0x1 state for the "Green Wire"
on the Slave.

I2C Decoding Update: 
-------------------
Due to accidently picking 0x55 as my Slave's ID#, I mis-diagnosed 
Command-#1 (= return a const byte value) as needing a shorter delay
between the i2c.write() and i2c.read() than the Slave's other commands
need.

As it turns out, they all need 200uS. delay between i2c.write() and 
i2c.read(), as shown in "Logic Analyzer I2C-Command #1-200uS-0xdd.png".

Interestingly, from the Slave's point of view, when this delay is 
< 200uS., it's as if the i2c.read() never happened, as the Slave's 
Wire.onRequest( requestHandler) is never called.

Q: Does the Master/Slave's I2C circuitry need 200uS. to release SDA, 
   etc., so the Bus will be ready to transact the i2c.read()?  Just
   a few uS. makes a big difference, does the Slave's I2C circuitry 
   need those few extra uS. to be ready to answer the i2c.read()?  
   Is it because the SCLK is only 100kHz?

