Assignment#1 Report:
-------------------

This assignment took somewhere between 16-24 hours.

Issues along the way:
--------------------
Textbooks are unavailable to me, due to lack of funds.

Assignment goals are ill-defined, with new Assignment details being posted as late as 5 hours after the completion deadline.

Tool chain to use is ill-defined.  The commands to use just magically appeared at the end of the spreadsheet with no announcement in the Announcements section.

It's not clear if we're supposed to disassemble the .bin files produced by developer.mbed.org, or the ones produced by gcc in VirtualBox.

Shared VirtualBox image was helpful, up to a point.
I.e., it has the tool chain installed, so we can use it, once we learn what commands to use.
I.e.^2, github.com refuses to work with the VirtualBox image's Firefox, due to that Firefox being ancient (v23, where Firefox is now at v37).
I.e.^3, VirtualBox's "Ubuntu Software Center" provides no way to upgrade Firefox.
I.e.^4, synaptic must be installed, and how to do that must be identified.
	sudo apt-get install synaptic
I.e.^5, synaptic does allow upgrading Firefox.
I.e.^6, This is all necessary because github.com won't allow uploading of a ssh key using the ancient Firefox version in the shared VirtualBox image.
I.e.^7, In synaptic, <mark firefox & xul-extubufox for update, Apply>.
I.e.^8, To avoid weird line-wrapping issues with copy+paste’ing my ssh key, I opened my id_rsa.pub file in my VirtualBox's newly-updated FireFox, copy’ed it out of there with the mouse, then pasted it into the github.com’s Add SSH Key window in my Settings there.

I followed github.com's second group of getting started instructions to set up my local repository, in ~/git/hw01 in my VirtualBox.

To populate my local repository, I did:

    mkdir ~/git
    cd ~/git
    echo \# e4357 > README.md
    git init
    git add README.md
    git commit -m "first commit"
    git remote add origin https://github.com/NeuroDuck/e4357.git
    git push -u origin master

to submit my still-needing-changes files, so I can at least have something checked in there now.

After I made some further changes to my files, to push them to github.com, in my VirtualBox I did:

    git commit -a -m "commit message."
    git push origin master

Not sure which dumpobj to use, nor which dumpobj args to use.

My work and home IP's differ, so I do this to switch from one to the other:

    sudo dhclient -r
    sudo dhclient -v eth0
or:
    sudo service network-manager restart
or:
    nmcli con down id 'ConnectionNameHere'
    nmcli con up id 'ConnectionNameHere'

I've only tried the first one so far.

Not sure how to get any files out of VirtualBox, thus my use of Screenshots.
I.e., my Windows laptop blue-screen's when I plug in any Memory Key while VirtualBox is running, even with the VirtualBox USB extender installed.
I.e.^2, after installing VirtualBox, my Windows laptop can no longer go into Safe Mode, so I can remove any potentially offending *.sys USB driver files.
I.e.,^3 Drag-and-Drop and Clipboard out of VirtualBox don't work, nor does mounting Windows Shared Drives in VirtualBox.

Update: sudo adduser e4357 vboxsf	// Add my user to VirtualBox's vboxsf group, which owns 
					// the /media entries, i.e., sf_C_DRIVE and sf_E_DRIVE (= mbed).
Update: I re-installed my VirtualBox, and made sure I plugged my DevBoard into a USB2 Port instead of
	a USB3 Port.  Doing the latter apparently causes VirtualBox to Blue-Screen my Windows laptop.
Update: Now I can cd into /media/sf_E_Drive, but its contents are independent of those of the DevBoard.
Update: In my VirtualBox, I clicked on Devices->USB Devices, which downloaded a MBED device driver from 
	Windows Update.
Update: Now my VirtualBox has /media/MBED, whose contents do = my DevBoard's contents.
Update: Alas, having the VirtualBox connect to my DevBoard in this way causes the E: Drive to disappear
	from my laptop.
Update:	Is there a way to have the VirtualBox successfully access my DevBoard as /media/sf_E_Drive, 
	instead of /media/MBED, so I can continue to see my DevBoard as E: on my laptop?

Finally found the mapping between Port:Pin numbers and Development Board pin numbers.

Finally discovered that there are defined Register offset .h files.

Finally found some Include Dirs to use with "gcc -I" so I can use the defined Register offsets, rather than hard-coding in their addresses.

To allow my use of:

    #include <LPC17xx.h>

to work, in my VirtualBox, in ~/git/hw01, I set:
MBED_DIR=../../work02/mbed/libraries/mbed/targets/cmsis/TARGET_NXP/TARGET_LPC176X
CMSIS_DIR=../../work02/mbed/libraries/mbed/targets/cmsis

and compiled as follows:

  arm-none-eabi-gcc -g -O0 -I$MBED_DIR -I$CMSIS_DIR -mcpu=cortex-m3 -mthumb -c gpio.c -o gpio.o

then dumped the disassembly as follows:

  arm-none-eabi-objdump –S –D gpio.o | more 

which gives the results shown in the checked-in "setGPIO-function_disassembly.png".

I still don't know which of the many different Include Dirs in the shared VirtualBox image are the correct ones to use.

I finally was able to understand and implement the FIOPIN approach described in the User's Manual Section 9.6.2.

Results/Solutions:
-----------------
Meaning of Machine Code in Loop Body:
------------------------------------
Referring to the checked-in "setGPIO-function_disassembly.png", skip down to the address line "b4:", which is where this line's Machine Code starts:

    LPC_GPIO0->FIOPIN &= ~pinMask;

First let's explain the various operations that are going on in this line of code, starting with using:

    arm-none-eabi-gcc -E -g -O0 -I$MBED_DIR -I$CMSIS_DIR \
        -mcpu=cortex-m3 -mthumb -c gpio.c > gpio.E

which expands the above line of C-code to:

    ((LPC_GPIO_TypeDef *) ((0x2009C000UL) + 0x0) )->FIODIR &= ~dirMask;

So the above line of code actually consists of:

1. Add an absolute address to two byte offsets and store the sum in a Register:

     0x2009C000 + 0x0(= the byte offset to the first GPIO Port) + 
	FIODIR(= byte offset in the LPC_GPIO struct)

2. Load the value at the address created by this sum. 

3. Compute the logical NOT of the value in the dirMask variable.

4. Logical OR the value from #3 with the value from #2.

5. Store the value from #4 back into the address from #1.

It's not shown in the .png file above, but at address "cc:", I see:

    cc: 2009c000	.word 0x2009c000

so we can see that the LPC_GPIO_BASE value is stored in address "cc:".  

With 1-5 above in mind, let's look at the Assembly Language Instructions starting address "b4:" in the .png file above that implement this line of C-code:

    LPC_GPIO0->FIOPIN &= ~pinMask;

Referring to the User's Manual Section 34.2.4.2.1, etc., I speculate that these lines:

    b4: 4b05 ldr r3, [pc, #20]
    b6: 4a05 ldr r2, [pc, #20]
    b8: 6951 ldr r1, [r2, #20]
    ba: 68fa ldr r2, [r7, #12]

are doing the address+offset addition, and the fetching of the value at that location into a Register, and the fetching of the value of pinMask into another register.

Next we have:

    bc: 43d2 mvns r2, r2

which copies the bitwise NOT (it's doing the "~") of r2 back into r2, updating the conditional flags accordingly.

Next we have:

    be: 400a ands r2, r1

which does the "&=" part of the C-code line.

Finally we have:

    c0: 615a str r2, [r3, #20]

Which stores the AND'ed value back into the address pointed to by the value stored in r3, plus #20.
There are some parts I'm missing here, i.e., how register mapping copies the register contents above in/out of 0x2009c0000.

As for the bitfield values/meanings for the above Assembly Language Instructions, I refer to pg. 2 here:

   https://ece.uwaterloo.ca/~ece222/ARM/ARM7-TDMI-manual-pt3.pdf

from which we can decode as follows:

    b4: 4b05 ldr r3, [pc, #20]

0x4bxx matches line #6 in the Table on pg. 2 (PC-relative load), where:
         4    b    0    5
    0b0100 1011 0000 0101
      5432 1098 7654 3210
    Fixed Bit Value = 1
    Rd = 011
    Word8 = 0000 0101

Referring to Section 5.6, we see:

    Rd = Destination Register (= Register 3, in this case).
    Word8 = Immediate value (= # of words, aka # of bytes * 4) to offset from the PC 
            to calculate the address to load into Register 3, in this case.

Now let's consider the following line:

    bc: 43d2 mvns r2, r2

         4    3    d    2
    0b0100 0011 1101 0010
      5432 1098 7654 3210

This matches #4 in Table 2 (ALU operations). Referring to Section 5.4, we see:

    Fixed Bit Value = 010000
    Op = 1111
    Rs = 010
    Rd = 010

For this line, Op = MVNS, aka bitwise NOT Register#n.
Rs = Source Register = r2.
Rd = Dest.  Register = r2.

Moving on to the next Assembly Language line:

    be: 400a ands r2, r1

         4    0    0    a
    0b0100 0000 0000 1010
      5432 1098 7654 3210

which is another ALU operation Instruction.  

    Fixed Bit Value = 010000
    Op = 0000
    Rs = 001
    Rd = 010

In Section 5.4 again, we see:

   Op = bitwise AND

Source Register = r1
Dest.  Register = r2

Next Assembly Language Line:

    c0: 615a str r2, [r3, #20]

         6    1    5    a
    0b0110 0001 0101 1010
      5432 1098 7654 3210

This matches #9 on pg. 2 (Load/store with immediate offset).

In Section 5.9, we see:

    Fixed Bit Value = 011
    B = 0			# (1 = Byte quantity, 0 = word quantity)
    L = 0			# (1 = Load from memory, 0 = Store to memory)
    Offset5 = 00101
    Rb = 011
    Rd = 010

This {B,L} = Calculate the target address by:
             add together the value of Rb and the immediate value (= Offset5).
             Store the value of Rd at the calculated target address.
